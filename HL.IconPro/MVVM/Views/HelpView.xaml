<Window x:Class="HL.IconPro.HelpView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:HL.IconPro"
        mc:Ignorable="d"
        WindowStartupLocation="CenterScreen"
        Title="ICON PRO HELP" Height="713.653" Width="993.253" ResizeMode="CanMinimize" Background="#FFE7E7E7">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="354.074"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <StackPanel Width="290.794" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,15.537,0,8.419">
            <Button Content="EXTRACT AN ICON" Height="56" Margin="10,5,11,5"/>
            <Button Content="CREATE AN ICON FROM AN IMAGE" Height="56" Margin="10,5,11,5"/>
            <Button Content="CREATE AN ICON FROM A FOLDER" Height="56" Margin="10,5,11,5"/>
            <Button Content="CREATE AN EMPTY ICON" Height="56" Margin="10,5,11,5"/>
            <Button Content="OPEN AN ICON OR CURSOR FILE" Height="56" Margin="10,5,11,5"/>
        </StackPanel>
        <Label Content="This option will let you extract an icon from an executable file, like a DLL or EXE.&#xA;You only need to select the executable and which icon you want by using the icon picker dialog" HorizontalAlignment="Left" Margin="296,29,0,0" VerticalAlignment="Top" FontSize="12"/>
        <Label Content="You will prompted to select a PNG or a SVG image, then you must choose the frame sizes that&#xA;will be included and the bit depths. Note that, on now days, you dont need too use 8BPP and 4BPP frames!&#xA;Actually, 32BPP is the current common standard starting from Windows XP and Vista" HorizontalAlignment="Left" Margin="291,86,0,0" VerticalAlignment="Top" FontSize="12"/>
        <Label Content="If you are a professional designer, then this is the perfect choice for you. You must design your icon, in your&#xA;favorit designing environment, and save all the individual frames as PNG. So, you will create a png file for the 16x16 frame,&#xA;one PNG file for 32x32 and etc, for all the frames you want to include and in all the multiple bit dephts you want.&#xD;&#xA;Then, after that, you open ICON PRO and click on this option. You will select the folder with the icon frames. " HorizontalAlignment="Left" Margin="291,149,0,0" VerticalAlignment="Top" FontSize="12"/>
        <Label Content="This option will let you open the application work area just empty! Then you must create each frame&#xA;using the Create (From frame's section) to create individual frames from PNG or SVG." HorizontalAlignment="Left" Margin="290.794,227.665,0,0" VerticalAlignment="Top" FontSize="12"/>
        <Label Content="This option will let you open and modify/save/export any static cursor or icon file" HorizontalAlignment="Left" Margin="290.794,301.075,0,0" VerticalAlignment="Top" FontSize="12"/>
        <Path Data="M0,354.074 L976.85919,354.074" Fill="#FFF4F4F5" Height="1" Grid.Row="1" Stretch="Fill" Stroke="White" VerticalAlignment="Top"/>
        <Path Data="M576.8,355.074 L576.8,644.87067" Fill="#FFF4F4F5" HorizontalAlignment="Left" Height="290.797" Margin="576.8,1,0,0" Grid.Row="1" Stretch="Fill" Stroke="White" Width="1"/>
        <TextBlock HorizontalAlignment="Left" Margin="761.62,10,0,0" Grid.Row="1" TextWrapping="Wrap" Text="ABOUT" VerticalAlignment="Top" Foreground="#FFF36000" FontWeight="Bold" FontSize="18"/>
        <TextBlock HorizontalAlignment="Left" Margin="591,38.6,0,0" Grid.Row="1" TextWrapping="Wrap" VerticalAlignment="Top" Height="212" Width="386" FontSize="11" TextAlignment="Center" Foreground="Black"><Run Text="Look, I'm not"/><Run Text=" a professional developer. For me, by now, programming"/><LineBreak/><Run Text="is just a hobby. Even though, I try to make things in the better"/><Run Text=" "/><Run Text="way possible!"/><LineBreak/><Run/><LineBreak/><Run Text="My name is Herbert Lausmann, and I am Brazilian :)"/><LineBreak/><Run Text="This tool was developed by myself! I did lots of researchs on internet"/><LineBreak/><Run Text="to code and build this tool."/><LineBreak/><Run/><LineBreak/><Run Text="I don't know how long is Microsoft going to make use and support Icon Files, but, as long as they do, this tool might be useful for developers and"/><LineBreak/><Run Text="designers. And that's why I've uploaded it to GITHUB."/><LineBreak/><Run/><LineBreak/><Run Text="Hope you understand all the things I've pointed out."/><LineBreak/><Run/><LineBreak/><Run Text="Have a nice day :)"/></TextBlock>
        <Grid HorizontalAlignment="Left" Height="327" Margin="10,17,0,0" VerticalAlignment="Top" Width="276" Background="#05FFFFFF"/>
        <ScrollViewer HorizontalAlignment="Left" Height="305.088" Margin="10,6,0,0" Grid.Row="1" VerticalAlignment="Top" Width="562" VerticalScrollBarVisibility="Auto">
            <StackPanel ScrollViewer.VerticalScrollBarVisibility="Auto">
                <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="KNOWN ISSUES" VerticalAlignment="Top" Foreground="#FFF36000" FontWeight="Bold" FontSize="18"/>
                <Label Content="When creating frames/icons, any frame with a Bit Depth smaller than 24bpp that needs to be resized,&#xA;will be resized with a notable quality loss (it will get noisy)! I'm so sorry about this, but it seems to be something that&#xA;I am not able to fix. I think it's a problem related to the internal algorithm used in the .NET/Windows&#xA;API for resizing bitmaps. I also tried another libs like ImageMagick, but the problem was still there!!!" HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10" Width="556"/>
                <Label Content="By now, if you need to create an 8bpp or 4bpp icon, you should use the create icon from folder option. Note that, you&#xA;will need to design and export all the frame sizes of your icon as PNG images and drop then in some folder and then&#xD;&#xA;use Icon Pro" HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10" Width="556"/>
                <Label Content="When opening  icons with any bit depth smaller than 24bpp, you will notice the first problem that I described above!" HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10"/>
                <Label Content="IF YOU UNDERSTAND WELL ABOUT BITMAPS, BYTES, BITS AND ETC, then you can help me out with the issue&#xD;&#xA;described above. What I need for now is: Code some function to resize Indexed Color Bitmaps (1, 16, 256 Colors)&#xD;&#xA;without getting that boring color noise. Also, I need some good method for converting 32bpp and 24bpp images&#xD;&#xA;to 8bpp and 4bpp without quality loss.&#xD;&#xA;Also, I need some good way for doing the unmask operation between the XOR and AND images of the&#xD;&#xA;icon frames. Currently I'm doing that by converting these two to 32bpp, using EditableBitmapImage GetPixel&#xD;&#xA;and SetPixel methods, and after that converting the image back to it original bit depht. As you may have&#xD;&#xA;thought, I get some quality loss when doing this process.&#xD;&#xA;&#xD;&#xA;Note that, this application works with the WPF BitmapSources/BitmapFrames, but, if you can do what I've&#xD;&#xA;described above in GDI+, it won't be a problem. The library HL.IconPro.Lib.Wpf already includes a reference&#xD;&#xA;to System.Drawing.dll assembly. I wanted to avoid this reference, but I needed it to convert SVG files to&#xD;&#xA;WPF BitmapImages.&#xD;&#xA;&#xD;&#xA;Final considerations:&#xD;&#xA;&#xD;&#xA;I rewrote the Core library to be more easy to understand, and before you ask me, I will explain something:&#xD;&#xA;I could have coded the Core using unsafe methods, pointers, unsafe structs, you know, low level code.&#xD;&#xA;But I didn't, instead, my choice was using the BinaryReader and the BinaryWriter classes to write/read&#xD;&#xA;the things. This way, I got a bigger abstraction from the Low Level context. As well, unsafe codes are a&#xD;&#xA;bit hard to debug sometimes.&#xD;&#xA;I rewrote the code to expose all the Low Level structs used for icons/cursors as &quot;Medium&quot; Level classes that&#xD;&#xA;has the same fields (and some properties) and are able to read/write from a stream. The deal was build a&#xD;&#xA;transparent easy-to-read code that everyone could understand depite the complexety of the Icon/Cursor file." HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10"/>
                <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" Foreground="#FFF36000" FontWeight="Bold" FontSize="18"><Run Text="TI"/><Run Text="PS AND NEWS"/></TextBlock>
                <Label Content="You dont need to include within your icon all the frame sizes from 16 to 256.&#xA;Actually, the sizes you should include are: 16x16, 24x24, 32x32, 48x48, 64x64&#xA;Microsoft Windows will resize de 256x256 (if availble) frame to use in place of the missing sizes!" HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10"/>
                <Label Content="You should not use 8bpp and 4bpp bit dephts on now days. You can do it, but is not needed.&#xA;The newer icons files includes only 32bpp frames." HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10"/>
                <Label Content="After opening some windows icons, I discovered that sometimes they've included also frames in 20x20 and 40x40 sizes.&#xA;I have no ideia about why, but being official icons from Microsoft, there must be a reason behind this!&#xA;So, now you are able to include frames of 20x20 and 40x40 within your icons!" HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10" Height="56" Width="537"/>
                <Label Content="I've opened lots of icons, from Windows, I also spent some time reading articles. The conclusion I got was:&#xD;&#xA;Microsoft Windows, starting from Vista, doesn't includes 8bpp and 4bpp frames in their icons. And, most of them&#xD;&#xA;includes only the following frame sizes: 16x16, 20x20, 24x24, 32x32, 40x40, 48x48, 64x64, 256x256.&#xD;&#xA;As you can see, you don't need to include frames between 64x64 and 256x256. This way, you will get also smaller&#xD;&#xA;file sizes.&#xD;&#xA;&#xD;&#xA;I'm sorry if the informations are a bit confusing. The icon format is confusing. It's hard to find a standard. But, &#xD;&#xA;it seems, the standard I've described right above is a good one to be followed.&#xD;&#xA;&#xD;&#xA;In another side, native Windows XP icons seems to include only 3 frame sizes: 16x16, 32x32, 48x48. Each of them in&#xD;&#xA;a 32bpp version and a 8bpp version.&#xD;&#xA;&#xD;&#xA;In short words, if you build 32bpp icons with PNG 256x256 frame, they're supposed to work well in Windows XP.&#xD;&#xA;The Windows XP will just ignore the 256x256 frame. Also, I don't think you need to include 8bpp and 4bpp frames.&#xD;&#xA;I guess, as Windows XP runs on 32 bit platform, it will be all okay.&#xD;&#xA;&#xD;&#xA;Final considerations for now:&#xD;&#xA;Building icons for Windows Vista and newer versions of Windows is completely safe. For Windows XP, it might be&#xD;&#xA;too, but I couldn't test it by now (I don't have any machine that runs XP). Before XP, like Windows 2000 and others&#xD;&#xA;32bpp icons are not supposed to be supported, but if they include 8bpp or 4bpp frames, I guess it will be okay." HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10" Width="537"/>
            </StackPanel>
        </ScrollViewer>
        <Button Content="HOME" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="75" Grid.Row="1" Margin="0,0,157.2,19" Click="Button_Click"/>

    </Grid>
</Window>
